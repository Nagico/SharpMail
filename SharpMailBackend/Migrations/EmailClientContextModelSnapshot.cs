// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharpMailBackend.Entities;

#nullable disable

namespace SharpMailBackend.Migrations
{
    [DbContext(typeof(EmailClientContext))]
    partial class EmailClientContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("SharpMailBackend.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("create_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login_time");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Pop3Host")
                        .HasColumnType("TEXT")
                        .HasColumnName("pop3_host");

                    b.Property<int>("Pop3Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(110)
                        .HasColumnName("pop3_port");

                    b.Property<bool>("Pop3Ssl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("pop3_ssl");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("TEXT")
                        .HasColumnName("smtp_host");

                    b.Property<int>("SmtpPort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(25)
                        .HasColumnName("smtp_port");

                    b.Property<bool>("SmtpSsl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("smtp_ssl");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.ToTable("tb_account", (string)null);
                });

            modelBuilder.Entity("SharpMailBackend.Entities.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("create_time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("From")
                        .HasColumnType("TEXT")
                        .HasColumnName("from");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("read");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT")
                        .HasColumnName("subject");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("To")
                        .HasColumnType("TEXT")
                        .HasColumnName("to");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("tb_mail", (string)null);
                });

            modelBuilder.Entity("SharpMailBackend.Entities.Mail", b =>
                {
                    b.HasOne("SharpMailBackend.Entities.Account", "Account")
                        .WithMany("Mails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SharpMailBackend.Entities.Account", b =>
                {
                    b.Navigation("Mails");
                });
#pragma warning restore 612, 618
        }
    }
}
